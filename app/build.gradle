plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'kotlin-platform-android'
    id 'dagger.hilt.android.plugin'
    id("androidx.navigation.safeargs.kotlin")
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}
//apply plugin: 'kotlin-android'


android {
    // To fix the issue of "Duplicate class com.google.firebase" while building project
    // protobuf-java and protobuf-lite are incompatible packages. They both include classes in the com.google.protobuf package.
    // Firebase packages depend upon protobuf-lite. Something else in the project must depend on protobuf-java
    // To exclude the duplicate classes that's causing the problem added the followings:

    configurations {
        implementation.exclude module: 'protobuf-lite'
        implementation.exclude module: 'httpclient'
    }

    compileSdkVersion rootProject.compileSdkVersion
 //   compileSdkPreview = "UpsideDownCake"

    signingConfigs {
        release {
            storePassword 'shepherd'
            keyAlias = 'shepherd'
            keyPassword 'shepherd'
            storeFile file('key.jks')
        }
    }

    defaultConfig {
        applicationId "com.shepherdapp.app"

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 8
        versionName "1.0.7"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        signingConfig signingConfigs.debug
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
//            signingConfig signingConfigs.debug
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

//            buildConfigField("String", "BASE_URL_USER", base_url_user)
//            buildConfigField("String", "BASE_URL", base_url)
//            buildConfigField("String", "BASE_URL_USER_STAGING", base_url_user_staging)
//            buildConfigField("String", "BASE_URL_STAGING", base_url_staging)

            //dev urls
//            buildConfigField("String", "BASE_URL_USER", base_url_user_dev)
//            buildConfigField("String", "BASE_URL", base_url_dev)
//            buildConfigField("String", "BASE_URL_RESOURCE_SHARING", base_url_resource_sharing_dev)

            // client urls
            buildConfigField("String", "BASE_URL_USER", base_url_user_client)
            buildConfigField("String", "BASE_URL", base_url_client)
            buildConfigField("String", "BASE_URL_RESOURCE_SHARING", base_url_resource_sharing_client)

//            // Live urls
//            buildConfigField("String", "BASE_URL_USER", base_url_user_live)
//            buildConfigField("String", "BASE_URL", base_url_live)
//            buildConfigField("String", "BASE_URL_RESOURCE_SHARING", base_url_resource_sharing_live)
        }
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false

            signingConfig signingConfigs.release
//            buildConfigField("String", "BASE_URL", base_url_live)
//            buildConfigField("String", "BASE_URL", base_url_local)
//            buildConfigField("String", "BASE_URL", base_url_staging)

//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //dev urls
//            buildConfigField("String", "BASE_URL_USER", base_url_user_dev)
//            buildConfigField("String", "BASE_URL", base_url_dev)

            // client urls
//            buildConfigField("String", "BASE_URL_USER", base_url_user_client)
//            buildConfigField("String", "BASE_URL", base_url_client)

            // Live urls
            buildConfigField("String", "BASE_URL_USER", base_url_user_live)
            buildConfigField("String", "BASE_URL", base_url_live)
            buildConfigField("String", "BASE_URL_RESOURCE_SHARING", base_url_resource_sharing_live)

        }
    }
//    flavorDimensions "default"
/*
    productFlavors {
        dev {
            dimension = 'default'
            applicationIdSuffix = ".dev"
        }
        prod {
            dimension = 'default'
        }
    }
*/
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    configurations.all {
        resolutionStrategy {
            exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"

        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        baseline file("lint.xml")
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def project = "shepherd"
            def separator = "_"
            def buildType = variant.buildType.name
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def date = new Date()

            def formattedDate = date.format('dd_MM_yyyy')

            if (variant.buildType.name == "release") {
                def newApkName = project + separator + "v" + versionName + separator + versionCode + separator + buildType + separator + formattedDate + ".apk"
                output.outputFileName = newApkName
            }
            if (variant.buildType.name == "debug") {
                def newApkName = project + separator + "v" + versionName + separator + versionCode + separator + buildType + ".apk"
                output.outputFileName = newApkName
            }

            /*  def buildTag = versionName //"1.0.1.7"


              def newApkName = "v" + buildTag + "(" + project + ")" + separator + formattedDate + ".apk"


  //            project + separator + "v" + versionName + separator + versionCode + separator + buildType + separator + formattedDate + ".apk"


              output.outputFileName = newApkName*/
        }
    }

    /* buildTypes {
         release {
             debuggable false
             minifyEnabled true
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
         }
     }*/

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "androidx.annotation:annotation:$annotationVersion"
    implementation "androidx.activity:activity-ktx:$activityKtxVersion"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'

    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))
    // Firebase
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation('com.google.firebase:firebase-firestore-ktx') {
        // Excluded the protobuf-javalite and protobuf-lite to fix the issue of "Duplicate class com.google.firebase" while building project
//        exclude group: 'com.google.protobuf',module: 'protobuf-javalite'
//        exclude group: 'com.google.protobuf',module: 'protobuf-lite'
//        exclude group: "com.google.protobuf", module: "protobuf-java"
    }

    implementation 'com.google.firebase:firebase-messaging-ktx'
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:30.3.1')
    implementation 'com.google.firebase:firebase-auth'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.google.firebase:firebase-crashlytics-buildtools:2.9.2'

    androidTestImplementation "androidx.test.ext:junit-ktx:$androidXJunitVersion"
    /**-------------------testing libs------------------------------------------**/
    //UI Testing , AndroidJUnitRunner and JUnit Rules &Espresso dependencies
    //junit 5
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "io.mockk:mockk:$mockVersion"
    androidTestImplementation "org.assertj:assertj-core:$assertjVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoIntentsVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesTestVersion"
    implementation "androidx.arch.core:core-testing:$coreTestingVersion"
    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    implementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    /**-------------------------------------------------------------**/
    //android support
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "com.google.android.material:material:$materialVersion"
    // retrofit
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpInterceptorVersion"
    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"
//    annotationProcessor "com.google.dagger:dagger-android-processor:2.11"
    //Image Libraries
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"
    implementation "com.squareup.picasso:picasso:$picassoVersion"
    //sdp and ssp
    implementation "com.intuit.ssp:ssp-android:$sspVersion"
    implementation "com.intuit.sdp:sdp-android:$sspVersion"
    //Pick Media Library
    implementation 'com.github.Mindinventory:Lassi:1.1.0'
    //Circle ImageView
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    implementation 'com.github.zhpanvip:viewpagerindicator:1.2.1'

    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    //toasty
    implementation "com.github.GrenderG:Toasty:$toasty_version"

    // country code picker
    implementation "com.github.joielechong:countrycodepicker:${COUNTRY_CODE_PICKER}"

    // Dependency required for country code picker
    implementation 'io.michaelrocks:libphonenumber-android:8.12.48'

    // Places API
    implementation 'com.google.android.libraries.places:places:2.6.0'

    implementation "com.michalsvec:single-row-calednar:$calednarVersion"
    //MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
//    implementation "com.github.wRorsjakz:Android-NumPad:$numberpadVersion"
    implementation "androidx.biometric:biometric:$biometric_version"
    implementation 'com.google.android.material:material:1.8.0'
    implementation ("com.applandeo:material-calendar-view:1.9.0-rc03"){
        exclude group: 'androidx.core'

    }
    implementation 'com.github.prolificinteractive:material-calendarview:1.6.1'

    // google drive libs
    implementation 'com.google.http-client:google-http-client-gson:1.26.0'
    implementation('com.google.api-client:google-api-client-android:1.26.0') {
        exclude group: 'org.apache.httpcomponents'
        //Exclude conflicting modules
        exclude module: 'httpclient'
    }
    implementation('com.google.apis:google-api-services-drive:v3-rev136-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    // Google Play Billing Library dependency
    implementation("com.android.billingclient:billing-ktx:$billing_version")

    implementation 'com.google.android.gms:play-services-auth:20.2.0'
    // Google Fit
    implementation 'com.google.android.gms:play-services-fitness:21.1.0'

    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:2.1.0'

    //View Pager2
    implementation "androidx.viewpager2:viewpager2:$viewPager2Version"
//    implementation "androidx.core:core-ktx:+"
//    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

//    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
}
kapt {
    correctErrorTypes true
}
//repositories {
//    mavenCentral()
//}
